array argno1[8] : w32 -> w8 = symbolic
array argno2[1] : w32 -> w8 = symbolic
array argno3[8] : w32 -> w8 = symbolic
array argno4[4] : w32 -> w8 = symbolic
array argno5[4] : w32 -> w8 = symbolic
array const_arr1[2] : w32 -> w8 = [39 0]
array const_arr3[768] : w32 -> w
array macke_sizeof_argno0[4] : w32 -> w8 = symbolic
array macke_sizeof_argno2[4] : w32 -> w8 = symbolic
array macke_sizeof_argno6[4] : w32 -> w8 = symbolic
array macke_sizeof_argno7[4] : w32 -> w8 = symbolic
array macke_sizeof_argno8[4] : w32 -> w8 = symbolic
array macke_sym_switch_gettext_quote[4] : w32 -> w8 = symbolic
array macke_sym_switch_gettext_quote_1[4] : w32 -> w8 = symbolic
array model_version[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 model_version))
         (Sle 1
              N0:(ReadLSB w32 0 macke_sizeof_argno0))
         (Slt N0 1025)
         (Eq false (Eq 4 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 128 N0))
         (Eq false (Eq 2 N0))
         (Sle 1
              N1:(ReadLSB w32 0 macke_sizeof_argno2))
         (Slt N1 1025)
         (Eq false (Eq 4 N1))
         (Eq false (Eq 16 N1))
         (Eq false (Eq 128 N1))
         (Eq false (Eq 2 N1))
         (Sle 1
              N2:(ReadLSB w32 0 macke_sizeof_argno6))
         (Slt N2 1025)
         (Eq false (Eq 4 N2))
         (Eq false (Eq 16 N2))
         (Eq false (Eq 128 N2))
         (Eq false (Eq 2 N2))
         (Sle 1
              N3:(ReadLSB w32 0 macke_sizeof_argno7))
         (Slt N3 1025)
         (Eq false (Eq 4 N3))
         (Eq false (Eq 16 N3))
         (Eq false (Eq 128 N3))
         (Eq false (Eq 2 N3))
         (Sle 1
              N4:(ReadLSB w32 0 macke_sizeof_argno8))
         (Slt N4 1025)
         (Eq false (Eq 4 N4))
         (Eq false (Eq 16 N4))
         (Eq false (Eq 128 N4))
         (Eq false (Eq 2 N4))
         (Or N5:(Eq 7
                    N6:(ReadLSB w32 0 argno4))
             (Eq 6 N6))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 macke_sym_switch_gettext_quote)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 macke_sym_switch_gettext_quote_1)))
         (Eq 0
             (And w32 (LShr w32 (ReadLSB w32 0 argno5)
                                1)
                      1))
         (Ult N7:(Add w64 18446744073670317200 (Select w64 N5 51538176 39234416))
              2)
         (Ult 0
              N8:(ReadLSB w64 0 argno1))
         (Eq false
             (Eq 18446744073709551615
                 N9:(ReadLSB w64 0 argno3)))
         (Eq false (Eq 0 N9))
         (Eq false
             (Eq N10:(Read w8 0 argno2)
                 (Read w8 (Extract w32 0 N7)
                          const_arr1)))
         (Eq false (Eq 80 N10))
         (Eq false (Eq 57 N10))
         (Eq false (Eq 38 N10))
         (Eq false (Eq 76 N10))
         (Eq false (Eq 113 N10))
         (Eq false (Eq 108 N10))
         (Eq false (Eq 83 N10))
         (Eq false (Eq 49 N10))
         (Eq false (Eq 115 N10))
         (Eq false (Eq 0 N10))
         (Eq false (Eq 117 N10))
         (Eq false (Eq 74 N10))
         (Eq false (Eq 66 N10))
         (Eq false (Eq 79 N10))
         (Eq false (Eq 119 N10))
         (Eq false (Eq 54 N10))
         (Eq false (Eq 120 N10))
         (Eq false (Eq 124 N10))
         (Eq false (Eq 99 N10))
         (Eq false (Eq 63 N10))
         (Eq false (Eq 116 N10))
         (Eq false (Eq 53 N10))
         (Eq false (Eq 33 N10))
         (Eq false (Eq 91 N10))
         (Eq false (Eq 43 N10))
         (Eq false (Eq 101 N10))
         (Eq false (Eq 70 N10))
         (Eq false (Eq 125 N10))
         (Eq false (Eq 110 N10))
         (Eq false (Eq 44 N10))
         (Eq false (Eq 42 N10))
         (Eq false (Eq 9 N10))
         (Eq false (Eq 89 N10))
         (Eq false (Eq 87 N10))
         (Eq false (Eq 59 N10))
         (Eq false (Eq 61 N10))
         (Eq false (Eq 11 N10))
         (Eq false (Eq 77 N10))
         (Eq false (Eq 90 N10))
         (Eq false (Eq 78 N10))
         (Eq false (Eq 50 N10))
         (Eq false (Eq 103 N10))
         (Eq false (Eq 45 N10))
         (Eq false (Eq 84 N10))
         (Eq false (Eq 47 N10))
         (Eq false (Eq 52 N10))
         (Eq false (Eq 92 N10))
         (Eq false (Eq 107 N10))
         (Eq false (Eq 60 N10))
         (Eq false (Eq 41 N10))
         (Eq false (Eq 85 N10))
         (Eq false (Eq 98 N10))
         (Eq false (Eq 67 N10))
         (Eq false (Eq 35 N10))
         (Eq false (Eq 82 N10))
         (Eq false (Eq 12 N10))
         (Eq false (Eq 105 N10))
         (Eq false (Eq 40 N10))
         (Eq false (Eq 94 N10))
         (Eq false (Eq 122 N10))
         (Eq false (Eq 109 N10))
         (Eq false (Eq 100 N10))
         (Eq false (Eq 111 N10))
         (Eq false (Eq 112 N10))
         (Eq false (Eq 121 N10))
         (Eq false (Eq 102 N10))
         (Eq false (Eq 104 N10))
         (Eq false (Eq 51 N10))
         (Eq false (Eq 55 N10))
         (Eq false (Eq 93 N10))
         (Eq false (Eq 118 N10))
         (Eq false (Eq 34 N10))
         (Eq false (Eq 114 N10))
         (Eq false (Eq 10 N10))
         (Eq false (Eq 88 N10))
         (Eq false (Eq 106 N10))
         (Eq false (Eq 48 N10))
         (Eq false (Eq 96 N10))
         (Eq false (Eq 86 N10))
         (Eq false (Eq 65 N10))
         (Eq false (Eq 56 N10))
         (Eq false (Eq 72 N10))
         (Eq false (Eq 39 N10))
         (Eq false (Eq 123 N10))
         (Eq false (Eq 81 N10))
         (Eq false (Eq 75 N10))
         (Eq false (Eq 73 N10))
         (Eq false (Eq 37 N10))
         (Eq false (Eq 58 N10))
         (Eq false (Eq 69 N10))
         (Eq false (Eq 36 N10))
         (Eq false (Eq 46 N10))
         (Eq false (Eq 95 N10))
         (Eq false (Eq 13 N10))
         (Eq false (Eq 62 N10))
         (Eq false (Eq 71 N10))
         (Eq false (Eq 97 N10))
         (Eq false (Eq 8 N10))
         (Eq false (Eq 126 N10))
         (Eq false (Eq 32 N10))
         (Eq false (Eq 7 N10))
         (Eq false (Eq 68 N10))
         (Eq 0
             (And w16 (ReadLSB w16 N11:(Extract w32 0 (Add w64 256
                                                               (Mul w64 2 (ZExt w64 N10)))) const_arr3)
                      16384))
         (Ult 1 N8)]
        false)
